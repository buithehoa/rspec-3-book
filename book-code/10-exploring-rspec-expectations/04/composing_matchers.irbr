>> require 'rspec/expectations'
=> true
>> include RSpec::Matchers
=> Object

>> /^\[warn\] / === '[warn] Disk space low'
=> true
>> /^\[warn\] / === '[error] Out of memory'
=> false
>> (1..10) === 5
=> true
>> (1..10) === 15
=> false

>> def describe_value(value)
>>   case value
>>   when be_within(0.1).of(Math::PI) then 'Pi'
>>   when be_within(0.1).of(2 * Math::PI) then 'Double Pi'
>>   end
>> end
=> :describe_value
>> describe_value(3.14159)
=> "Pi"
>> describe_value(6.28319)
=> "Double Pi"

>> numbers = [3.14159, 1.734, 4.273]
=> [3.14159, 1.734, 4.273]
>> expect(numbers).to start_with( be_within(0.1).of(Math::PI) )
=> true

>> expect([]).to start_with( be_within(0.1).of(Math::PI) )
RSpec::Expectations::ExpectationNotMetError: expected [] to start with be   ↩
within 0.1 of 3.141592653589793
    <literal:elide> backtrace truncated </literal:elide>

>> expect([]).to start_with( a_value_within(0.1).of(Math::PI) )
RSpec::Expectations::ExpectationNotMetError: expected [] to start with a    ↩
value within 0.1 of 3.141592653589793
    <literal:elide> backtrace truncated </literal:elide>

>> expect([Math::PI]).to start_with a_value_within(0.1).of Math::PI
=> true

>> start_with_a_and_end_with_z = start_with('a').and end_with('z')
=> #<RSpec::Matchers::BuiltIn::Compound::And:0x007f94dc83ba30
    @matcher_1=#<RSpec::Matchers::BuiltIn::StartWith:0x007f94dc82bd38
                @actual_does_not_have_ordered_elements=false, @expected="a">,
    @matcher_2=#<RSpec::Matchers::BuiltIn::EndWith:0x007f94dc82bc20
                @actual_does_not_have_ordered_elements=false, @expected="z">>

>> expect(['a', 'z']).to start_with_a_and_end_with_z
=> true
>> expect(['a', 'y']).to start_with_a_and_end_with_z
RSpec::Expectations::ExpectationNotMetError: expected ["a", "y"] to end     ↩
with "z"
    <literal:elide> backtrace truncated </literal:elide>
>> expect(['b', 'y']).to start_with_a_and_end_with_z
RSpec::Expectations::ExpectationNotMetError:    expected ["b", "y"] to      ↩
start with "a"

...and:

   expected ["b", "y"] to end with "z"
    <literal:elide> backtrace truncated </literal:elide>
