>> require 'rspec/mocks/standalone'
=> true
>> movie = double('Jaws')
=> #<Double "Jaws">

>> expect(movie).to receive(:record_review).with('Good')
=> #<RSpec::Mocks::MessageExpectation #<Double "Jaws">.record_review("Good")>
>> movie.record_review('Bad')
RSpec::Mocks::MockExpectationError: #<Double "Jaws"> received               ↩
:record_review with unexpected arguments
  expected: ("Good")
       got: ("Bad")
    <literal:elide> backtrace truncated </literal:elide>

>> imdb = double('IMDB')
=> #<Double "IMDB">

>> allow(imdb).to receive(:rating_for).and_return(3) # default
=> #<RSpec::Mocks::MessageExpectation #<Double "IMDB">.rating_for(any       ↩
arguments)>
>> allow(imdb).to receive(:rating_for).with('Jaws').and_return(5)
=> #<RSpec::Mocks::MessageExpectation #<Double "IMDB">.rating_for("Jaws")>
>> imdb.rating_for('Weekend at Bernies')
=> 3
>> imdb.rating_for('Jaws')
=> 5

>> require './code/14-customizing-test-doubles/02/stock_ticker'
RSpec::Mocks::MockExpectationError: (Double "Jaws").record_review("Good")
    expected: 1 time with arguments: ("Good")
    received: 0 times
    <literal:elide> backtrace truncated </literal:elide>

>> client = instance_double('NasdaqClient')
=> #<InstanceDouble(NasdaqClient) (anonymous)>

>> expect(client).to receive(:current_price).at_most(:twice) \
>>   .and_return(130.0)
=> #<RSpec::Mocks::VerifyingMessageExpectation                              ↩
#<InstanceDouble(NasdaqClient) (anonymous)>.current_price(any arguments)>
>> stock_ticker = StockTicker.new(client)
=> #<StockTicker>
>> stock_ticker.price('AAPL')
=> 130.0
>> stock_ticker.price('AAPL')
=> 130.0
>> stock_ticker.price('AAPL')
RSpec::Mocks::MockExpectationError: (InstanceDouble(NasdaqClient)           ↩
(anonymous)).current_price("AAPL")
    expected: at most 2 times with any arguments
    received: 3 times with arguments: ("AAPL")
    <literal:elide> backtrace truncated </literal:elide>
